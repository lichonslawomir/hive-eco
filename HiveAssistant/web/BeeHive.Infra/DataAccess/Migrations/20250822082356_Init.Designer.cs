// <auto-generated />
using System;
using BeeHive.Infra.DataAccess.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeeHive.Infra.DataAccess.Migrations
{
    [DbContext(typeof(BeeHiveDbContext))]
    [Migration("20250822082356_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("BeeHive.Domain.Aggregate.AudioAggregateStatsData", b =>
                {
                    b.Property<int>("TimeAggregateSeriesId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("AmplitudeMav")
                        .HasColumnType("REAL");

                    b.Property<float>("AmplitudePeak")
                        .HasColumnType("REAL");

                    b.Property<float>("AmplitudeRms")
                        .HasColumnType("REAL");

                    b.Property<float>("DurationSec")
                        .HasColumnType("REAL");

                    b.Property<float>("Frequency")
                        .HasColumnType("REAL");

                    b.HasKey("TimeAggregateSeriesId", "Timestamp");

                    b.ToTable("AudioAggregateStatsData");
                });

            modelBuilder.Entity("BeeHive.Domain.Aggregate.TimeAggregateSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LasteAggregateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeSeriesId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TimeSeriesId", "Period")
                        .IsUnique();

                    b.ToTable("TimeAggregateSeries");
                });

            modelBuilder.Entity("BeeHive.Domain.Aggregate.TimeAggregateSeriesData", b =>
                {
                    b.Property<int>("TimeAggregateSeriesId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float?>("AvgValue")
                        .HasColumnType("REAL");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("MaxValue")
                        .HasColumnType("REAL");

                    b.Property<float?>("MedValue")
                        .HasColumnType("REAL");

                    b.Property<float?>("MinValue")
                        .HasColumnType("REAL");

                    b.HasKey("TimeAggregateSeriesId", "Timestamp");

                    b.ToTable("TimeAggregateSeriesData");
                });

            modelBuilder.Entity("BeeHive.Domain.BeeGardens.BeeGarden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("HoldingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HoldingId", "UniqueKey")
                        .IsUnique();

                    b.ToTable("BeeGardens");
                });

            modelBuilder.Entity("BeeHive.Domain.Data.TimeSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HiveId", "Kind")
                        .IsUnique();

                    b.ToTable("TimeSeries");
                });

            modelBuilder.Entity("BeeHive.Domain.Data.TimeSeriesData", b =>
                {
                    b.Property<int>("TimeSeriesId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("TimeSeriesId", "Timestamp");

                    b.ToTable("TimeSeriesData");
                });

            modelBuilder.Entity("BeeHive.Domain.Hives.Audio.AudioFile", b =>
                {
                    b.Property<int>("HiveId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("AmplitudeMav")
                        .HasColumnType("REAL");

                    b.Property<float>("AmplitudePeak")
                        .HasColumnType("REAL");

                    b.Property<float>("AmplitudeRms")
                        .HasColumnType("REAL");

                    b.Property<int>("BitsPerSample")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Channels")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Complete")
                        .HasColumnType("INTEGER");

                    b.Property<float>("DurationSec")
                        .HasColumnType("REAL");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Frequency")
                        .HasColumnType("REAL");

                    b.Property<int>("SampleRate")
                        .HasColumnType("INTEGER");

                    b.HasKey("HiveId", "Timestamp");

                    b.HasIndex("HiveId", "Complete");

                    b.ToTable("AudioFiles");
                });

            modelBuilder.Entity("BeeHive.Domain.Hives.Hive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AudioSensorBitsPerSample")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AudioSensorChannels")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AudioSensorSampleRate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeeGardenId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BeeGardenId", "UniqueKey")
                        .IsUnique();

                    b.ToTable("Hives");
                });

            modelBuilder.Entity("BeeHive.Domain.Holdings.Holding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UniqueKey")
                        .IsUnique();

                    b.ToTable("Holdings");
                });

            modelBuilder.Entity("BeeHive.Domain.Aggregate.AudioAggregateStatsData", b =>
                {
                    b.HasOne("BeeHive.Domain.Aggregate.TimeAggregateSeries", "TimeAggregateSeries")
                        .WithMany("AudioStats")
                        .HasForeignKey("TimeAggregateSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeAggregateSeries");
                });

            modelBuilder.Entity("BeeHive.Domain.Aggregate.TimeAggregateSeries", b =>
                {
                    b.HasOne("BeeHive.Domain.Data.TimeSeries", "TimeSeries")
                        .WithMany()
                        .HasForeignKey("TimeSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSeries");
                });

            modelBuilder.Entity("BeeHive.Domain.Aggregate.TimeAggregateSeriesData", b =>
                {
                    b.HasOne("BeeHive.Domain.Aggregate.TimeAggregateSeries", "TimeAggregateSeries")
                        .WithMany("Data")
                        .HasForeignKey("TimeAggregateSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeAggregateSeries");
                });

            modelBuilder.Entity("BeeHive.Domain.BeeGardens.BeeGarden", b =>
                {
                    b.HasOne("BeeHive.Domain.Holdings.Holding", "Holding")
                        .WithMany()
                        .HasForeignKey("HoldingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holding");
                });

            modelBuilder.Entity("BeeHive.Domain.Data.TimeSeries", b =>
                {
                    b.HasOne("BeeHive.Domain.Hives.Hive", "Hive")
                        .WithMany()
                        .HasForeignKey("HiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hive");
                });

            modelBuilder.Entity("BeeHive.Domain.Data.TimeSeriesData", b =>
                {
                    b.HasOne("BeeHive.Domain.Data.TimeSeries", "TimeSeries")
                        .WithMany("Data")
                        .HasForeignKey("TimeSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSeries");
                });

            modelBuilder.Entity("BeeHive.Domain.Hives.Audio.AudioFile", b =>
                {
                    b.HasOne("BeeHive.Domain.Hives.Hive", "Hive")
                        .WithMany()
                        .HasForeignKey("HiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hive");
                });

            modelBuilder.Entity("BeeHive.Domain.Hives.Hive", b =>
                {
                    b.HasOne("BeeHive.Domain.BeeGardens.BeeGarden", "BeeGarden")
                        .WithMany()
                        .HasForeignKey("BeeGardenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeeGarden");
                });

            modelBuilder.Entity("BeeHive.Domain.Aggregate.TimeAggregateSeries", b =>
                {
                    b.Navigation("AudioStats");

                    b.Navigation("Data");
                });

            modelBuilder.Entity("BeeHive.Domain.Data.TimeSeries", b =>
                {
                    b.Navigation("Data");
                });
#pragma warning restore 612, 618
        }
    }
}
